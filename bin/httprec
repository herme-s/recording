#!/opt/kronometrix/perl/bin/perl
#
#  Copyright (c) 2017 Stefan Parvu (www.kronometrix.org).
#  Initial Author: Stefan Parvu
#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation; either version 2
#  of the License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software Foundation,
#  Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
#  (http://www.gnu.org/copyleft/gpl.html)

use strict;
use warnings;
use JSON;
use File::Temp qw(tempfile);
use Getopt::Std;
use Time::HiRes qw(time alarm setitimer ITIMER_REAL);
use POSIX qw(pause);
use Tie::IxHash;
use HTTP::Response;
use HTTP::Tiny;
use Data::Dumper qw(Dumper);

###  Process command line args
usage() if defined $ARGV[0] and $ARGV[0] eq "--help";
getopts('hlvV') or usage();
usage()    if defined $main::opt_h;
revision() if defined $main::opt_V;

# verbose flag
my $verbose = defined $main::opt_v ? $main::opt_v : 0;

# logging flag
my $logging = defined $main::opt_l ? $main::opt_l : 0;

# process [interval [count]],
my ( $interval, $loop_max );
if ( defined $ARGV[0] ) {
    $interval = $ARGV[0];
    $loop_max = defined $ARGV[1] ? $ARGV[1] : 2**32;
    usage() if $interval == 0;
}
else {
    $interval = 1;
    $loop_max = 1;
}

###  Variables
my $cdata;                           # configuration data
my $rawfile;                         # krd raw data file
my $kdata;                           # configuration data
my $loop     = 0;                    # current loop number
$main::opt_h = 0;                    # help option
$main::opt_V = 0;                    # revision option
my $cfile    = 'httprec.json';       # configuration file
my $tcpka    = 0;                    # transport TCP keepalive settings
my $tp       = 0;                    # time precision
my $kfile    = 'kronometrix.json';   # configuration file
my ($baselog, $curlog, $wlog, $log); # logs
local $| = 1;


### MAIN BODY #

# Set a timer for WWW::Curl::Easy object
local $SIG{ALRM} = sub { };
setitimer( ITIMER_REAL, .1, .1 );
#my $http = WWW::Curl::Easy->new;

### 0.1sec sleep using a timer
pause;

# how often do we trigger (seconds)?
my $first_interval = $interval;

# signal handler is empty
local $SIG{ALRM} = sub { };

# first value is the initial wait, second is the wait thereafter
setitimer( ITIMER_REAL, $first_interval, $interval );

# check interval input
if ( $interval =~ /\./ ) {
    $tp = 3;
}

# osname
my $osname = "$^O";
my $agent = "kdr/1.2.16 httprec $osname";

# read configuration
$cdata = open_config($cfile);

# workloads
tie my %work, "Tie::IxHash";
%work = get_httpsvc($cdata);

# http init section
# cookie, agent name

my $rawkrd;
# logging option
if ($logging) {

    # kronometrix.json config file
    $kdata = open_config($kfile);

    ## logs
    ( $baselog, $curlog ) = get_log($kdata);
    $wlog = $baselog . "/httprec.log";
    $log = open_file($wlog);

    # save STDERR to log file
    *STDERR = $log;

    write_log ("info: started");
}

# get it as verbose
if($verbose) {

    my ($okssl, $whyssl) = HTTP::Tiny->can_ssl;

    if ($logging) {

          if ($okssl) { write_log ("SSL check: ok"); }              
        else { write_log ("SSL check: no, $whyssl"); }

        # write_log ("Total HTTP server instances: " . keys(%work));
        for my $key (keys %work) {
            my $value = $work{$key};
            write_log ("$key => $value");
        }
    } else {

          if ($okssl) { print "SSL check: ok\n" } 
        else { print "SSL check: no, $whyssl\n"; }

        # print "Total HTTP server instances: " . keys(%work) . ".\n";
        for my $key (keys %work) {
            my $value = $work{$key};
            print "$key => $value\n";
        }
    }
}

# init HTTP transport
my $http = HTTP::Tiny->new( keep_alive => $tcpka, 
                            agent => "User-Agent: $agent");

# main loop
while (1) {

    #if ($logging) {
    #    $rawkrd = open_file($rawfile);
    #}

    #my $head = tempfile();
    #$http->setopt(CURLOPT_WRITEHEADER, $head);

    #my $body = tempfile();
    #$http->setopt(CURLOPT_FILE, $body);

    for my $key (keys %work) {

        my $value = $work{$key};
        # configuration
        #
        #  "id" : 1,
        #  "name" : "apache",
        #  "host" : "localhost",
        #  "port" : 80,
        #  "message" : [
        #    {
        #      "name": "a2stat",
        #      "scheme" : "http",
        #      "method" : "GET",
        #      "path" : "/server-status",
        #      "description": "apache2 statistics",
        #      "data": [ ]
        #    }
        #
        # Example
        # a2test:1:apache:a2stat => http:GET:localhost:80:/server-status
        #
        my ($cname, $iname, $iid, $imsg) = split( /:/, $key );
        my ($ischeme, $imethod, $ihost, $iport, $ipath) = split( /:/, $value );
        my $url = $ischeme . "://" . $ihost . ":" . $iport . $ipath;

        if ( $verbose ) {
            if ($logging) {
                write_log("processing URL: $url...");
            } else { 
                print "processing URL: $url... ";
            }
        }

        my $response = $http->request($imethod, $url);

        my $status = $response->{status};

        if ($response->{success} ) {
            if ( $verbose ) {
                if ($logging) {
                    write_log("success");
                } else {
                    print "success\n";
                }
            }
                
            # get the content and parse
            #while (my ($name, $v) = each %{$response->{headers}}) {
            #    for my $value (ref $v eq 'ARRAY' ? @$v : $v) {
            #        print "$name: $value";
            #    }
            #}
            #if (length $response->{content}) {
                #print 'Length: ', length $response->{content};
	        #print Dumper $response;
            #}
            print $response->{content};
 
            #use HTML::Strip;

            #my $hs = HTML::Strip->new();
            #my $clean_text = $hs->parse( $response->{content} );
            #$hs->eof;

            #print $clean_text; 

            my $body = $response->{content};

            $body=~ m/<dt>([^\s]+) requests\/sec - ([^\s]+) (k*B)\/second - ([^\s]+) ([k,M]*B)\/request<\/dt>/;

            my $request_stats="requests_per_second=$1,$3_per_second=$2,$5_per_request=$4";
            print "$request_stats\n";

            my $reqsec   = $1; 
            my $kbytesec = $2;
            my $kbytereq = $4;
 
            # requests per second
            if ($reqsec =~ /^\./ ) { $reqsec = '0' . $reqsec; }

            # kbytesec KBytes per second
            my $bytes_unit = $3;
            if ( $bytes_unit =~ /^B/ ) { $kbytesec /= 1024; }

            # kbytereq KBytes per request
            my $req_unit = $5;
               if ( $req_unit =~ /^B/ ) { $kbytereq = sprintf ("%.2f", $kbytereq /= 1024); }
            elsif ( $req_unit =~ /^M/ ) { $kbytereq = sprintf ("%.2f", $kbytereq *= 1024); }
           
            # busy and idle workers
            $body=~ m/<dt>([^\s]+) requests currently being processed, ([^\s]+) idle workers<\/dt>/;
            my $busyworker = $1;
            my $idleworker = $2;

            # cpu usage
            $body=~ m/<dt>CPU Usage: u([^\s]+) s([^\s]+) cu.* cs.* - ([^\s]+%) CPU load<\/dt>/;
            my $cpustat="user_cpu=$1,system_cpu=$2,cpu_load=$3";
            my $cpupct=$3;
            $cpupct =~ s/\%//;
            if ($cpupct =~ /^\./ ) { $cpupct = sprintf ("%.2f", $cpupct .= '0'); }

            # traffic
            $body=~ m/<dt>Total accesses: ([^\s]+) - Total Traffic: ([^\s]+) <\/dt>/;
            print $2;

            # uptime
            $body=~ m/Server uptime: ([^<]+)<\/dt>/;
            my $uptime=$1;
 
            print "$reqsec:$kbytesec:$kbytereq:$busyworker:$idleworker:$cpupct:$uptime\n";
            #$body=~ m/<dt>CPU Usage: u([^\s]+) s([^\s]+) cu.* cs.* - ([^\s]+%) CPU load<\/dt>/;
            #my $cpu_stats="user_cpu=$1,system_cpu=$2,cpu_load=$3";
            #print "$request_stats\n";

        } else {
            if ( $verbose == 1 ) {
                if ($logging) {
                    write_log("failed");
                } else {
                    print "failed\n";
                }
            }
        }

        #process_request ($http, $work, $name, $id, $hname, $url, $p);
        #sleep $d;
    }

    #if ($logging) {
    #    close ($rawkrd);
    #}

    ### Check for end
    last if ++$loop == $loop_max;

    ### Interval
    pause;
}



### Subroutines

## configuration file

# open JSON configuration file
sub open_config {

    my ($conf) = @_;

    my $json_data;

    {
        local $/;

        # we will parse now the file
        if ( defined $ENV{'KRMX_PREFIX'} ) {
            if ( -e "$ENV{'KRMX_PREFIX'}/etc/$conf" ) {
                open my $fh, "<", "$ENV{'KRMX_PREFIX'}/etc/$conf";
                $json_data = <$fh>;
                close $fh;
            }
            else {
                print "error: open_conf - $! $ENV{'KRMX_PREFIX'}/etc/$conf \n";
                usage();
            }
        }
        else {
            if ( -e "/opt/kronometrix/etc/$conf" ) {
                open my $fh, "<", "/opt/kronometrix/etc/$conf";
                $json_data = <$fh>;
                close $fh;
            }
            else {
                print "error: open_conf - $! /opt/kronometrix/etc/$conf \n";
                usage();
            }
        }
    }

    my $perl_data = JSON->new->utf8->decode($json_data);

    return $perl_data;
}

# write config file
sub write_config {

    my ( $conf, $perl_data ) = @_;

    # JSON Object
    my $json_data = JSON->new->utf8->pretty->encode($perl_data);

    # we will parse now the file
    if ( defined $ENV{'KRMX_PREFIX'} ) {
        if ( -e "$ENV{'KRMX_PREFIX'}/etc/$conf" ) {
            open my $fh, ">", "$ENV{'KRMX_PREFIX'}/etc/$conf.tmp";

            # print $fh encode_json($data);
            print $fh $json_data;
            close $fh;
            move(
                "$ENV{'KRMX_PREFIX'}/etc/$conf.tmp",
                "$ENV{'KRMX_PREFIX'}/etc/$conf"
            ) or die "Error: cannot update $conf: $!";

        }
        else {
            print "error: write_config - $! $ENV{'KRMX_PREFIX'}/etc/$conf \n";
            usage();
        }
    }
    else {
        if ( -e "/opt/kronometrix/etc/$conf" ) {
            open my $fh, ">", "/opt/kronometrix/etc/$conf.tmp";
            print $fh $json_data;
            close $fh;
            move( "/opt/kronometrix/etc/$conf.tmp", "/opt/kronometrix/etc/$conf" )
              or die "Error: cannot update $conf: $!";
        }
        else {
            print "error: write_config - $! /opt/kronometrix/etc/$conf \n";
            usage();
        }
    }
}

# reload configuration
sub reload_config {

    write_log("info: main - signal HUP received, reload armed...");

    $cdata = open_config($cfile);

    ## hostid
    get_hostid($cdata);

    ## get HTTP server defintion
    %work = get_httpsvc($cdata);

    return;
}


# get workloads defintion
sub get_httpsvc {

    my ($data) = @_;
    tie my %httpsvc, "Tie::IxHash";

    my @temp = @{ $data->{'http'} };

    foreach my $f (@temp) {
        my ($sid, $tid, $dsid);

        my $name   = $f->{'name'};
        my $desc   = $f->{'description'};

        my @inss  = @{ $f->{'instance'} };

        foreach my $inst (@inss) {
            my $iid   = $inst -> {'id'};
            my $iname = $inst -> {'name'};
            my $ihost = $inst -> {'host'};
            my $iport = $inst -> {'port'};

            my @msg  = @{ $inst->{'message'} };
        
            foreach my $mesg (@msg) {

                my $imname = $mesg -> {'name'};
                my $ims    = $mesg -> {'scheme'};
                my $imm    = $mesg -> {'method'};
                my $imp    = $mesg -> {'path'};

                print "$name:$iid:$iname:$imname => $ims:$imm:$ihost:$iport:$imp\n";
                my $keyapp = $name . ":" . $iid . ":" . $iname . ":" . $imname;
                my $hvalue = $ims . ":" . $imm . ":" . $ihost . ":" . $iport . ":" . $imp;

                $httpsvc{$keyapp} = $hvalue;
            }
        }
    }

    return %httpsvc;
}


sub process_request {

    my ($http, $w, $n, $id, $s, $h, $u, $post) = @_;

    # rebuild the entire request url
    my $url = $s . "://" . $h . $u;
  
    #print "scheme: $s\n";
    #print "hostname: $h\n";
    #print "url: $u\n";
    #print "$url \n\n";

}


#
sub putraw {

    my ( $timereq, $workload, $reqname,  $ttime, $ctime, $dtime, $ptime, $psize, $fpkt, $resp ) = @_;

    my $devid;

    if ($workload) {
        $devid = $workload . "_" . $reqname;
    } else { 
        $devid = $reqname;
    }

    if ($logging) {
        printf $rawkrd "%.${tp}f:%s:%.3f:%.3f:%.3f:%.3f:%.3f:%d:%d\n",
                $timereq, $devid,
                $ttime  , $ctime   , $dtime  , $ptime,
                $fpkt   , $psize   , $resp;
    } else {
        printf "%.${tp}f:%s:%.3f:%.3f:%.3f:%.3f:%.3f:%d:%d\n",
                $timereq, $devid,
                $ttime  , $ctime   , $dtime  , $ptime,
                $fpkt   , $psize   , $resp;
    }
}


# get log defintion
#
sub get_log {
    my ($data) = @_;

    my $bpath = $data->{'log'}->{'base_path'};
    my $cpath = $data->{'log'}->{'current_path'};

    return ( $bpath, $cpath );
}


# write_log - write log message
#
sub write_log {

    my ($logbuf) = @_;
    my ( $sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst ) =
    localtime(time);

    my $dt = sprintf "%4d-%02d-%02d %02d:%02d:%02d",
                $year + 1900, $mon + 1, $mday, $hour, $min, $sec;

    if (eof $log) {
        print $log "$dt $logbuf\n";
    } else {
        print $log "\n$dt $logbuf";
    }

    return;
}


# open_data - open data file
#
sub open_file {

    my ($file) = @_;
    my $fh;

    if (-f $file) {
        open $fh, "+>>", "$file" or 
          die "error: open_file - cannot open $file $!";
        seek $fh, 0, 2;
        select ((select ($fh), $| = 1)[0]);

    } else {
        open $fh, "+>", "$file" or 
          die "error: open_file - cannot open $file $!";
        select ((select ($fh), $| = 1)[0]);

    }

    return $fh;
}


# usage - print usage and exit.
sub usage {
    print STDERR <<END;
USAGE: httprec [-hlvV] | [interval]
OPTIONS:
  -h        : help information
  -l        : log raw data to krd file, no STDOUT
  -v        : verbose information
  -V        : release version
  interval  : maximum number of seconds between samples

 FIELDS:

 NOTES

END
    exit 0;
}

# revision - print revision and exit
sub revision {
    print STDERR <<END;
httprec: 1.0.3, 2017-08-24 1433
END
    exit 0;
}
