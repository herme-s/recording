#!/opt/kronometrix/perl/bin/perl
#
#  Copyright (c) 2015 Stefan Parvu (www.kronometrix.org).
#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation; either version 2
#  of the License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software Foundation,
#  Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
#  (http://www.gnu.org/copyleft/gpl.html)

use strict;
use warnings;
use Getopt::Std;
use Time::HiRes qw(time alarm setitimer ITIMER_REAL);
use POSIX qw(pause);

# Debug Only
# use Data::Dumper;

### Command line arguments
usage() if defined $ARGV[0] and $ARGV[0] eq "--help";
getopts('hV') or usage();
usage()    if defined $main::opt_h;
revision() if defined $main::opt_V;

# process [[interval [count]]
my ( $interval, $loop_max );
if ( defined $ARGV[0] ) {
    $interval = $ARGV[0];
    $loop_max = defined $ARGV[1] ? $ARGV[1] : 2**32;
    usage() if $interval == 0;
}
else {
    $interval = 1;
    $loop_max = 1;
}

### Variables
my %old_nicdata;   # nic_stats data
my $loop = 0;      # current loop number
$main::opt_h = 0;  # help option
$main::opt_V = 0;  # revision option
my $tp = 0;        # time precision
local $| = 1;      # autoflush


### MAIN BODY

# how often do we trigger (seconds)?
my $first_interval = $interval;

# signal handler is empty
local $SIG{ALRM} = sub { };

# first value is the initial wait, second is the wait thereafter
setitimer( ITIMER_REAL, $first_interval, $interval );

# check interval input
if ( $interval =~ /\./ ) {
    $tp = 3;
}

my $cnt = 0;

while (1) {

    # get NIC stats
    my @nicstat = get_nicstat();

    foreach (@nicstat) {

        my ($n,$m,$net,$mac,$ipkt,$ierr,$idrop,$ibyt,$opkt,$oerr,$obyt,$col,$drop) = split;

        # printf "%.${tp}f:%s:%d:%s:%d:%d:%d:%d:%d:%d:%d:%d:%d\n",
        #        time, $n, $m, $mac, 
        #        $ipkt, $ierr, $idrop, $ibyt,
        #        $opkt, $oerr, $obyt, $col, $drop;


        # old values
        my ($old_ipkt,$old_ierr,$old_idrop,$old_ibyt,
            $old_opkt,$old_oerr,$old_obyt,$old_col,$old_drop);

        if (defined $old_nicdata{$n}) {
            ($old_ipkt,$old_ierr,$old_idrop,$old_ibyt,
             $old_opkt,$old_oerr,$old_obyt,$old_col,$old_drop) = split / /, $old_nicdata{$n};
        } else {
            $old_ipkt = $old_ierr = $old_idrop = $old_ibyt = 
            $old_opkt = $old_oerr = $old_obyt = $old_col = $old_drop = 0;
        }

        my $rpkt   = delta($old_ipkt, $ipkt);
        my $rerr   = delta($old_ierr, $ierr);
        my $rdrop  = delta($old_idrop, $idrop);
        my $rkbyte = delta($old_ibyt, $ibyt);
        $rkbyte = sprintf ("%.2f", $rkbyte / 1024);

        my $tpkt   = delta($old_opkt, $opkt);
        my $terr   = delta($old_oerr, $oerr);
        my $tkbyte = delta($old_obyt, $obyt);
        $tkbyte = sprintf ("%.2f", $tkbyte / 1024);

        my $cols   = delta($old_col, $col);
        my $pdrop  = delta($old_drop, $drop);

        my $rxtxpkt = $rpkt + $tpkt;
        my $rxtxkbytes = $rkbyte + $tkbyte;

        # save old data
        $old_nicdata{$n} = "$ipkt $ierr $idrop $ibyt $opkt $oerr $obyt $col $drop";

        printf "%.${tp}f:%s:%d:%.2f:%d:%d:%d:%.2f:%d:%d:%d:%d:%.2f\n",
               time, $n,
               $rpkt, $rkbyte, $rerr, $rdrop,
               $tpkt, $tkbyte, $terr,
               $pdrop, $cols,
               $rxtxpkt, $rxtxkbytes;
    }

    ### Check for end
    last if ++$loop == $loop_max;

    ### Interval
    pause;

}


### SUBROUTINES

sub delta {
    my ($old, $new) = @_;
    return $new - $old;
}


sub get_nicstat {
    
    my $netstat = "/usr/bin/netstat";
    my $pt      = time;
    my @stats;

    open my $fh, "-|", "$netstat", "-ibnd", "-f", "link"
      or die "cannot execute '$netstat' - $!";

    my @ns = <$fh>;
    
    close $fh;

    #Name Mtu Network Address Ipkts Ierrs Idrop Ibytes Opkts Oerrs Obytes Coll Drop
    foreach ( @ns ) {

        # filter out
        next if /^Name|lo/;

        my ($n,$m,$net,$mac,$ipkt,$ierr,$idrop,$ibyt,$opkt,$oerr,$obyt,$col,$drop) = split;

        $mac =~ s/:/_/go;

        my $payload = "$n $m $net $mac $ipkt $ierr $idrop $ibyt $opkt $oerr $obyt $col $drop";
        push @stats, $payload;
    }

    return @stats;
}


## usage - print usage and exit.
#
sub usage {
    print STDERR <<END;
USAGE: diskrec [-hV] | [interval [count]]
 e.g. diskrec 5       print continuously, every 5 seconds
      diskrec 1 5     print 5 times, every 1 second

 FIELDS:
  #01 timestamp  : seconds since Epoch, time
  #02 nicid      : NIC id, string

  # rx received, inbound
  #03 rxpkt      : rx packets per sec, rate
  #04 rxkbytes   : rx KBytes per sec, rate
  #05 rxerr      : rx packets containing errors, rate 
  #06 rxdrop     : rx drop packets, number

  # tx transmitted, outbound
  #07 txpkt      : tx packets per sec, rate
  #08 txkbytes   : tx KBytes per sec, rate
  #09 txerr      : tx packets containg errors, rate 
  #10 txdrop     : tx drop packets, number
  #11 txcol      : packet collision, rate 

  # throughput
  #12 rxtxpkt    : rx+tx packets per sec, rate
  #13 rxtxkbytes : rx+tx KBytes per sec, rate

END
    exit 0;
}


## revision - print revision and exit
sub revision {
    print STDERR <<END;
nicrec: 1.0.16, 2015-08-22 1449
END
    exit 0;
}
