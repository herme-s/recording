#
# Copyright (c) 2016 Stefan Parvu (www.kronometrix.org).
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#
# (http://www.gnu.org/copyleft/gpl.html)

package PerlSvc;

use strict;
use warnings;
use Getopt::Long;
use Date::Calc qw(:all);
use File::Copy;
use Time::HiRes qw(time gettimeofday sleep tv_interval);
use Win32::OLE ('in');
use Sys::Hostname;
use Time::Local;
use Win32;
use JSON;


# Debug Only
# use Data::Dumper;

### Command line arguments
usage() if defined $ARGV[0] and $ARGV[0] eq "--help";

my $recid           = 'diskrec';
my $cprefix         = 'C:\\Program Files\\Kronometrix\\etc';
my ($l, $v, $h, $V) = 0;
our %Config         = (ServiceName => $recid);

Getopt::Long::Configure('bundling');
my $result = GetOptions (
                "l|logging" => \$l,
                "v|verbose" => \$v,
                "h|help"    => \$h,
                "V|version" => \$V,
                "n|name=s" => \$Config{ServiceName}
                );

usage() if (defined $h || ! $result);
revision() if (defined $V);

# process [[interval [count]]
my ( $interval, $loop_max );
if ( defined $ARGV[0] ) {
    $interval = $ARGV[0];
    $loop_max = defined $ARGV[1] ? $ARGV[1] : 2**32;
    usage() if $interval == 0;
}
else {
    $interval = 1;
    $loop_max = 1;
}

### Variables
my $loop        = 0;                      # current loop number
my $cf          = 'kronometrix.json';     # default json config
my $logtime     = '0000';                 # min time check 23:59
my $stime;                                # sleep timer
my $last_time   = 0;                      # first counter
$|= 1;                                    # autoflush

my $verbose = defined $v ? $v : 0;
my $logging = defined $l ? $l : 0;

### MAIN BODY

# read configuration
my $cdata = open_config($cf);

my ( $blog, $clog, $dlog ) = getlog($cdata);

my $fname = $blog . "\\" . $recid . ".log";
my $fkrd  = $clog . "\\" . $recid . ".krd";

# log, rawlog files
my ($log, $rawlog);

if ($logging) {
    $rawlog = open_file($fkrd);
    $log = open_file($fname);
    writelog ("info: started");
}

# get stats
my $wmi = Win32::OLE->GetObject("winmgmts://./root/cimv2")
    or die "Cannot initialize WMI interface\n";

unless (defined &ContinueRun) {
    *ContinueRun = sub { return 1 };
    *RunningAsService = sub { return 0 };
    Interactive();
}

if (RunningAsService()) {

    # get service sample interval
    $interval = getssi($cdata);
    $loop_max = 2**32;

    $rawlog = open_file($fkrd);
    $log = open_file($fname);
    writelog ("info: started");
}


### SUBROUTINES


sub Startup {

    while(ContinueRun()) {

    ### verbose
    if ($verbose) {
        if (RunningAsService()) {
	    writelog ("info: last_time=$last_time");
	} else {
	    writelog ("info: last_time=$last_time") if ($logging);
	    print "info: last_time=$last_time\n";
	}
    }


    my %dstat;
    my ($di, $dkey);

    # measure payload
    my $start = [gettimeofday];

    my %diskname = getdisk();

    ### verbose
    if ($verbose) {
        my $entries = keys (%diskname);
        if (RunningAsService()) {
            writelog ("info: Number of disks: $entries");
            for my $key (keys %diskname) {
                my $value = $diskname{$key};
                writelog ("info: disk$key => $value");
            }

	} else {
            writelog ("info: Number of disks: $entries")
	      if ($logging);
            print "info: Number of disks: $entries\n";
            for my $key (keys %diskname) {
                my $value = $diskname{$key};
                print "info: disk$key => $value\n";
            }
	}
    }

    my $l;


    # metrics
    my ($reads,  $rkbytes, $rbusypct,
        $writes, $wkbytes, $wbusypct,
	$ql,     $aql,     $busypct,    
	$iops,   $rwkbytes );

    my ($lsize, $lfree, $lfreepct);


    for my $k (keys %diskname) {

        print "inside for disk\n";

        $l = $diskname{$k};
	$di = $k . " " . $l;
	$l =~ s/\://;
	$dkey = lc "disk" . $k . "_" . $l;

        print "dkey=$dkey\n";
        print "l=$l\n";

        # Inventory data
        my $wdinv = 
	 $wmi->ExecQuery("SELECT Size from Win32_LogicalDisk where Name='$l:'");

        foreach my $obj (in $wdinv) {
            $lsize = sprintf "%.2f", $obj->{Size} / ( 1024 * 1024 * 1024);
        }

	print "lsize=$lsize\n";

        # Performance Metrics
        # SELECT * FROM Win32_PerfFormattedData_PerfDisk_PhysicalDisk 
        # Where Name='0 C:'
        # my $wdstat = $wmi->ExecQuery("SELECT * FROM Win32_PerfFormattedData_PerfDisk_PhysicalDisk Where Name='$di'");
        my $wdstat = 
	$wmi->ExecQuery("SELECT * FROM Win32_PerfFormattedData_PerfDisk_LogicalDisk Where Name='$l:'");

        foreach my $obj (in $wdstat) {
            $reads    = $obj->{DiskReadsPerSec};
            $rkbytes  = sprintf "%.2f", $obj->{DiskReadBytesPerSec} / 1024;
            $rbusypct = $obj->{PercentDiskReadTime};

            $writes   = $obj->{DiskWritesPerSec};
            $wkbytes  = sprintf "%.2f", $obj->{DiskWriteBytesPerSec} / 1024;
            $wbusypct = $obj->{PercentDiskWriteTime};

    	    $ql       = $obj->{CurrentDiskQueueLength};
	    $aql      = $obj->{AvgDiskQueueLength};
	    $busypct  = $obj->{PercentDiskTime};

       	    $iops     = $obj->{DiskTransfersPerSec};
	    $rwkbytes = sprintf "%.2f", $obj->{DiskBytesPerSec} / 1024;

            $lfree    = sprintf "%.2f", $obj->{FreeMegaBytes} / 1024;
            $lfreepct = 100 - $obj->{PercentFreeSpace};
        }

        print "info: $dkey:$reads:$rkbytes:$rbusypct:$writes:$wkbytes:$wbusypct:$ql:$aql:$busypct:$iops:$rwkbytes:$lsize:$lfree:$lfreepct\n";

       
        $dstat{$dkey} = 
	"$dkey:$reads:$rkbytes:$rbusypct:$writes:$wkbytes:$wbusypct:$ql:$aql:$busypct:$iops:$rwkbytes:$lsize:$lfree:$lfreepct";
    }

    # end payload
    # my $end = Win32::GetTickCount() - $start;
    my $tnow  = int(gettimeofday);
    my $tsec  = [gettimeofday];
    my $end   = tv_interval ($start, $tsec);
    my $stime = $interval - $end;

    print "interval=$interval\n";
    print "stime=$stime\n";


    # cktime for rotation
    if (RunningAsService()) {
        cktime();
    }

    ### verbose
    if ($verbose) {
        if (RunningAsService()) {
            writelog ("info: elapsed=$end(ms), sleep=$stime(ms), timenow=$tnow(epoch)");
	} else {
            writelog ("info: elapsed=$end(ms), sleep=$stime(ms), timenow=$tnow(epoch)") if ($logging);
            print "info: elapsed=$end(ms), sleep=$stime(ms), timenow=$tnow(epoch)\n";
	}
    }

    if ($last_time > 0) {

        putraw($tnow, %dstat);

	$last_time = $tnow;

        ### Interval
        sleep($stime);

    } else {

        putraw($tnow, %dstat);

        if (!RunningAsService()) {
            # check count, interval
            last if ++$loop == $loop_max;
        }

	$last_time = $tnow;

        ### Interval
        sleep($stime);

	next;
    }

    if (!RunningAsService()) {
        # check count, interval
        last if ++$loop == $loop_max;
    }


    } # while loop

    if (RunningAsService()) {
        writelog ("info: stopped");
    }
}


sub Interactive {

    Install();

    if (( ! defined $h ) and (! defined $V)) {
        Startup();
    }
}


sub Install {

    if (RunningAsService()) {
        # check for proper config file
        if (! defined $cdata) {
            die "Cant install $Config{ServiceName} service, exiting...\n";
        }

        if (! defined $clog ) {
            die "Cant install $Config{ServiceName} service, exiting...\n";
        }
    }

    $Config{DisplayName} = "Kronometrix $Config{ServiceName} Service";
    $Config{Description} = "Kronometrix $recid Service";

    return;
}


sub Remove {

    $Config{ServiceName} = $recid;
    return;
}


# getdisk -- get disks logic drive
#
sub getdisk {

    my %disk;

    # get physical disks
    my ($di, $dd);
    my $wd = $wmi->InstancesOf("Win32_DiskDrive");
    foreach my $disk (in $wd) {
        $di = $disk->{Index};
        $dd = $disk->{DeviceID};
        $dd =~ s/\\/\\\\/sg;
        # writelog ("Physical Disk: $di $dd") if (RunningAsService());

        my $qpart = 'ASSOCIATORS OF ' . '{Win32_DiskDrive.DeviceID="' . $dd . '"} WHERE AssocClass = Win32_DiskDriveToDiskPartition';

        my $wpart = $wmi->ExecQuery($qpart);

        foreach my $obj (in $wpart) {

            my $d1 = $obj->{DeviceID};
	    # writelog ("$d1") if (RunningAsService());

            my $wdrive = $wmi->ExecQuery("ASSOCIATORS OF {Win32_DiskPartition.DeviceID=\"$d1\"} WHERE AssocClass = Win32_LogicalDiskToPartition");

	    foreach my $lobj (in $wdrive) {
                my $lid = $lobj->{DeviceID};
	        $disk{$di} = $lid;
	    }
        }
    }

    return %disk;
}


# print_raw - print krd raw data
#
sub putraw {
    my ($traw, %c)  = @_;

    if (RunningAsService()) {

        for my $k (sort keys %c) {
            printf $rawlog "%s:%s\n",
                $traw, $c{$k};
        }

    } else {
        if ( $logging ) {

            for my $k (sort keys %c) {
                printf $rawlog "%s:%s\n", $traw, $c{$k};
            }

        }

        for my $k (sort keys %c) {
            printf "%s:%s\n", $traw, $c{$k};
        }
    }
}


# chklog - check log directory
#
sub chklog {

    my ($dir) = @_;

    if (defined $dir) {
        if (! -d $dir) {
            die "error: chklog - cannot find $dir directory";
        }
    } else {
        die "error: chklog - cannot find $dir directory";
    }

    return;
}


# open_data - open data file
#

sub open_file {

    my ($file) = @_;
    my $fh;

    if (-f $file) {
        open $fh, "+>>", "$file" or 
	  die "error: open_file - cannot open $file $!";
	seek $fh, 0, 2;
        select ((select ($fh), $| = 1)[0]);

    } else {
        open $fh, "+>", "$file" or 
	  die "error: open_file - cannot open $file $!";
        select ((select ($fh), $| = 1)[0]);

    }

    return $fh;
}



# open_config - open JSON configuration file
#
sub open_config {

    my ($conf) = @_;
    my $json_data;

    {
        local $/;

        # we will parse now the file
	if ( defined $ENV{'KRMX_PREFIX'} ) {
	    if ( -e "$ENV{'KRMX_PREFIX'}/etc/$conf" ) {
	        open my $fh, "<", "$ENV{'KRMX_PREFIX'}/etc/$conf";
	        $json_data = <$fh>;
	        close $fh;
	    } else {
                die "error: open_config - $! $ENV{'KRMX_PREFIX'}/etc/$conf \n";
	    }
	} else {
	    if ( -e "$cprefix\\$conf" ) {
		open my $fh, "<", "$cprefix\\$conf";
		$json_data = <$fh>;
		close $fh;
	    } else { 
	        die "error: open_config - $! $conf \n"; 
	    }
	} 
    }
    
    my $perl_data = JSON->new->utf8->decode($json_data); 
    
    return $perl_data;
}


# getssi - get service sample interval
#
sub getssi {
    my ($data) = @_;

    my $ssi = $data->{'sampling_interval'}->{"$recid"};
    $ssi = 60 if (! defined $ssi);

    return $ssi;
}


# getlog - get log directory information
#
sub getlog {
    my ($data) = @_;

    my $bpath = $data->{'log'}->{'base_path'};
    chklog($bpath);

    my $cpath = $data->{'log'}->{'current_path'};
    chklog($cpath);

    my $dpath = $data->{'log'}->{'daily_path'};
    chklog($dpath);

    return ( $bpath, $cpath, $dpath );
}


# writelog - write log message
#
sub writelog {

    my ($logbuf) = @_;
    my ( $sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst ) =
    localtime(time);

    my $dt = sprintf "%4d-%02d-%02d %02d:%02d:%02d",
                $year + 1900, $mon + 1, $mday, $hour, $min, $sec;

    if (eof $log) {
        print $log "$dt $logbuf\n";
    } else {
        print $log "\n$dt $logbuf";
    }

    return;
}


# cktime - check midnight time
#
sub cktime {

    my ($sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst) = 
       localtime(time);

    my $tcheck = sprintf ("%02d%02d", $hour, $min);

    my $yesterday = get_yesterday();

    # print "time check: $tcheck";

    if ($tcheck eq $logtime ) {
        writelog ("info: cktime - start log rotation");
        close ($rawlog);
	my $numkrd = rotate($clog, $dlog, $yesterday);
        writelog ("info: cktime - end log rotation, files rotated: $numkrd");
        $rawlog = open_file($fkrd);
    }

    return;
}


## 
sub rmkrd {
    my ($file) = @_;

    if ( -e $file ) {
        if (unlink($file) > 0) { return 0; } else { return 1; }
    }

    return;
}


## null the raw data
sub null2krd {

    my($blog, $clog ) = @_;

    opendir(DIR, $clog) or
        die "error: null2krd - Can't open $clog: $!";
    my @files = grep {!/^\.+$/} readdir(DIR);
    close(DIR);

    my @krds;
    foreach my $krd (@files) {
        next if $krd !~ /.*\.krd$/;
        push @krds, $krd;
    }

    foreach my $krdf (@krds) {
        copy("$clog/$krdf", "$blog") or
           die "error: null2krd cannot copy krd file: $krdf $!\n";
         open my $fh, ">", "$clog/$krdf";
         close $fh;
    }

    return;
}


## rotate raw data
sub rotate {

    my($rawdir, $dailydir, $dstamp) = @_;

    opendir(DIR, $rawdir) or
        die "error: rotate - Can't open $rawdir: $!";
    my @files = grep {!/^\.+$/} readdir(DIR);
    close(DIR);

    my $dest = "$dailydir/$dstamp";

    my @krd_files;
    my $p = $recid . ".krd";

    foreach my $krd (@files) {
        next if $krd !~ /^$p$/;
        push @krd_files, $krd;
    }

    my $nkrd = $#krd_files + 1;
    
    if ($verbose) {
        writelog ("info: rotate - copying krd data files: $nkrd");
    }

    my $cnt = 0;
    # check if we have anything to move to daily
    if ( $nkrd > 0 ) {
   
        # make daily target dir
        unless(mkdir $dest) {
            writelog ("warning: rotate - cannot create $dstamp, already exists");
        }

        foreach my $rawfile (@krd_files) {
            copy("$rawdir/$rawfile","$dest") or
                writelog ("error: rotate - copying previous daily data, $!");

	    # reset to zero
            open my $ftkrd, ">", "$rawdir/$rawfile";
            close $ftkrd;

            $cnt++;
        }
    }

    # return number of raw krd files moved to daily
    return $cnt;
}


## get yesterday
sub get_yesterday {

    my ( $yy, $mm, $dd ) = Today();
    ( $yy, $mm, $dd ) = Add_Delta_Days( $yy, $mm, $dd, -1 );

    # ISO 8601 YYYY-MM-DD
    my $prevdate = sprintf("%d-%02d-%02d", $yy, $mm, $dd);

    # Debug
    # print "PREVDATE: $prevdate \n";

    return $prevdate;
}


# usage - print usage and exit.
#
sub usage {
    print STDERR <<END;
USAGE: diskrec [-lhV] | [interval [count]]
       diskrec -install auto
       diskrec -remove
 eg. 
  diskrec.exe                # default CLI mode, print per disk stats stdout
  diskrec.exe 1 5            # print per disk stats 5 times, every 1s stdout
  diskrec.exe -l 25          # print per disk stats every 25s stdout, krdlog
  diskrec.exe -install auto  # run as a service, every 60s, default krdlog
  diskrec.exe -remove        # stop and remove the service 

 FIELDS:
   #01 timestamp  : seconds since Epoch, time
   #02 diskid     : disk id

   # reads
   #03 reads      : disk reads per sec, rate
   #04 rkbytes    : disk read KB per sec, rate
   #05 rbusypct   : busy time servicing read requests, number

   # writes
   #06 writes     : disk writes per sec, rate
   #07 wkbytes    : disk write KB per sec, rate
   #08 wbusypct   : busy time servicing write requests, number

   # queue length, throughput
   #09 ql         : current r+w, including in service, queue length
   #10 aql        : avg r+w queue length
   #11 busypct    : busy time r+w requests, number
   #12 iops       : disk read+write requests per second, rate
   #13 rwkbytes   : read+write KB per second, rate

   # inventory disk usage
   #14 size       : volume size in GB, logical drive
   #15 free       : volume free in GB
   #16 usedpct    : volume used in percentage
END
    return;
}


# revision - print revision and exit
#
sub revision {
    print STDERR <<END;
diskrec: 1.0.18, 2016-01-01 1329
END
    return;
}
