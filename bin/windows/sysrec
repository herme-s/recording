#
# Copyright (c) 2015 Stefan Parvu (www.kronometrix.org).
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#
# (http://www.gnu.org/copyleft/gpl.html)

package PerlSvc;

use strict;
use warnings;
use Getopt::Long;
use Date::Calc qw(:all);
use File::Copy;
use Time::HiRes qw(time gettimeofday);
use Win32::OLE ('in');
use Sys::Hostname;
use Time::Local;
use Win32;
use JSON;


# Debug Only
use Data::Dumper;
### Command line arguments
usage() if defined $ARGV[0] and $ARGV[0] eq "--help";

Getopt::Long::Configure('bundling');
my $result = GetOptions (
                "v|verbose" => \$main::opt_v,
                "h|help"    => \$main::opt_h,
                "V|version" => \$main::opt_V
                );

usage() if ( $main::opt_h || ! $result );
revision() if defined $main::opt_V;

# process [[interval [count]]
my ( $interval, $loop_max );
if ( defined $ARGV[0] ) {
    $interval = $ARGV[0];
    $loop_max = defined $ARGV[1] ? $ARGV[1] : 2**32;
    usage() if $interval == 0;
}
else {
    $interval = 1;
    $loop_max = 1;
}

### Variables
$main::opt_h    = 0;                      # help option
$main::opt_V    = 0;                      # revision option
$main::opt_v    = 0;                      # verbose option
my $loop        = 0;                      # current loop number
my $recid       = 'sysrec';
my $cf          = 'kronometrix.json';     # default json config
my $logtime     = '0000';                 # min time check 23:59
my $stime;                                # sleep timer
$|= 1;                                    # autoflush

my $verbose = defined $main::opt_v ? $main::opt_v : 0;

our %Config = (ServiceName => "$recid");


### MAIN BODY

# cpu properties
my @cpu_params = qw(PercentIdleTime PercentProcessorTime PercentPriviledgedTime PercentUserTime PercentInterruptTime TimeStamp_Sys100NS);

# read configuration
my $cdata = open_config($cf);

my ( $blog, $clog, $dlog ) = getlog($cdata);

my $fname = $blog . "\\" . $recid . ".log";
my $fkrd  = $clog . "\\" . $recid . ".krd";

# open raw data
my ($log, $rawlog);

# get stats
my $wmi = Win32::OLE->GetObject("winmgmts://./root/cimv2")
    or die "Cannot initialize WMI interface\n";

my $last_time = 0;

unless (defined &ContinueRun) {
    *ContinueRun = sub { return 1 };
    *RunningAsService = sub { return 0 };
    Interactive();
}

if (RunningAsService()) {
    if ($interval == 1 && $loop_max == 1) {
        $interval = 60;
        $loop_max = 2**32;
    }

    $rawlog = open_file($fkrd);
    $log = open_file($fname);
    writelog ("info: started");
}

### SUBROUTINES


sub Startup {

    while(ContinueRun()) {

    ### verbose
    if ($verbose) {
        if (RunningAsService()) {
            writelog ("info: main - last_time=$last_time");
	} else {
            print "info: main - last_time=$last_time";
	}
    }

    # measure payload
    my $start = Win32::GetTickCount();

    # cpu statistics
    my $wcpu = $wmi->InstancesOf("Win32_PerfFormattedData_PerfOS_Processor");

    my ($cpupct, $userpct, $nicepct, $idlepct, $syspct, $irqpct);
    foreach my $obj (in $wcpu) {
        $cpupct = $obj->{PercentProcessorTime};
        $userpct = $obj->{PercentUserTime};
	$syspct = $obj->{PercentPrivilegedTime};
	$idlepct = $obj->{PercentIdleTime};
	$irqpct = $obj->{PercentInterruptTime};
    }

    my $wsys = $wmi->InstancesOf("Win32_PerfFormattedData_PerfOS_System");

    my ($runqsz, $proc, $lwp);
    foreach my $obj (in $wsys) {
	$runqsz = $obj->{ProcessorQueueLength};
	$proc = $obj->{Processes};
	$lwp = $obj->{Threads};
    }

    my $sumpct = 0;
    my $headpct = 0;


    # memory statistics
    my $wos = $wmi->InstancesOf("Win32_OperatingSystem");

    my ($memtotal, $memfree, $swaptotal, $swapfree);
    foreach my $obj (in $wos) {
        $memtotal  = $obj->{TotalVisibleMemorySize};
        $memfree = $obj->{FreePhysicalMemory};
        $swaptotal = $obj->{SizeStoredInPagingFiles};
        $swapfree = $obj->{FreeSpaceInPagingFiles};
    }

    my $memused =  $memtotal - $memfree;
    my $memusedpct = sprintf ("%.2f", ( $memused / $memtotal ) * 100 );
    my $realfreepct = sprintf ("%.2f", ( $memfree / $memtotal ) * 100 );
    my $swapused = $swaptotal - $swapfree;
    my $swapusedpct = sprintf("%.2f", ($swaptotal - $swapfree) / $swaptotal * 100); 
    

    # end payload
    my $end = Win32::GetTickCount() - $start;
    my $stime = ($interval * 1000) - $end;

    # output time
    my $tnow = int(gettimeofday);

    # cktime for rotation
    if (RunningAsService()) {
        cktime();
    }

    ### verbose
    if ($verbose) {
        if (RunningAsService()) {
            writelog ("info: main - elapsed=$end(ms), sleeptime=$stime(ms), timenow=$tnow(epoch)");
	} else 
            print "info: main - elapsed=$end(ms), sleeptime=$stime(ms), timenow=$tnow(epoch)";
	}
    }

    # time drift adjustment
    if ($last_time > 0) {

        my $drift = $tnow - $last_time;

        if ($drift > $interval) {
	    my $delta = $drift - $interval;
	    my $tfix = $tnow - $delta;
	    
            if (RunningAsService()) {
                writelog ("warning: main - drift detected, drift=$drift(s), interval=$interval(s)"); 
	    } else {
                print "warning: main - drift detected, drift=$drift(s), interval=$interval(s)";
	    }


	    ### verbose
	    if ($verbose) {
                if (RunningAsService()) {
                    writelog ("info: main - delta=$delta(s), timenow=$tnow(epoch), timefix=$tfix(epoch)");
		} else { 
                    print "info: main - delta=$delta(s), timenow=$tnow(epoch), timefix=$tfix(epoch)";
		}
	    }

            putraw($tfix,
	       $cpupct,$sumpct,$headpct,$userpct,$syspct,$idlepct,$irqpct,
	       $runqsz, $proc, $lwp, $memusedpct, $memused, $memfree, $memtotal,               $realfreepct, $swapusedpct, $swapused
	           );

            $stime -= $delta * 1000;
            $last_time = $tfix;

            Win32::Sleep($stime);

    	} elsif ($drift < $interval) {

            my $ext = $interval - $drift;
            my $tfix = $tnow + $ext;
            if (RunningAsService()) {
                writelog ("warning: main - drift detected, drift=$drift(s), interval=$interval(s)"); 
            } else {
                print "warning: main - drift detected, drift=$drift(s), interval=$interval(s)"; 
	    }

	    ### verbose
	    if ($verbose) {
                if (RunningAsService()) {
                    writelog ("info: main - ext=$ext(s), timenow=$tnow(epoch), timefix=$tfix(epoch)");
		} else {
                    print "info: main - ext=$ext(s), timenow=$tnow(epoch), timefix=$tfix(epoch)";
		}
	    }

            putraw($tfix,
	       $cpupct,$sumpct,$headpct,$userpct,$syspct,$idlepct,$irqpct,
	       $runqsz, $proc, $lwp, $memusedpct, $memused, $memfree, $memtotal,               $realfreepct, $swapusedpct, $swapused, $swapfree, $swaptotal
	           );

            $stime += $ext * 1000;
	    $last_time = $tfix;

	    Win32::Sleep($stime);

	} else {

            putraw($tnow,
	       $cpupct,$sumpct,$headpct,$userpct,$syspct,$idlepct,$irqpct,
	       $runqsz, $proc, $lwp, $memusedpct, $memused, $memfree, $memtotal,
	       $realfreepct, $swapusedpct, $swapused, $swapfree, $swaptotal
	           );
	    $last_time = $tnow;

	    Win32::Sleep($stime);

	}

    # 1st loop, last_time always 0
    } else {

        putraw($tnow,
	       $cpupct,$sumpct,$headpct,$userpct,$syspct,$idlepct,$irqpct,
	       $runqsz, $proc, $lwp, $memusedpct, $memused, $memfree, $memtotal,
	       $realfreepct, $swapusedpct, $swapused, $swapfree, $swaptotal
	       );


        if (!RunningAsService()) {
            # check count, interval
            last if ++$loop == $loop_max;
        }

        $last_time = $tnow;

        ### Interval
        Win32::Sleep($stime);
    }

    if (!RunningAsService()) {
        # check count, interval
        last if ++$loop == $loop_max;
    }

    }
}


sub Interactive {
    Install();
    Startup();
}


sub Install {

    $Config{DisplayName} = "Kronometrix $Config{ServiceName} Service";
    $Config{Description} = "Kronometrix $recid Service";

    return;
}


sub remove {
    Getopt::Long::GetOptions('service=s' => \$Config{ServiceName});

    return;
}



# print_raw - print krd raw data
#
sub putraw {
    my ($traw, $total, $sum, $head, $user, $sys, $idle, $irq, 
        $rq, $prc, $thr, $mupct, $mu, $mf, $mt, $mfpct, 
	$supct, $su, $suf, $sut) = @_;

    if (!RunningAsService()) {
        printf
        "%s:%.2f:%.2f:%.2f:%.2f:%.2f:%.2f:%.2f:%.2f:%d:%d:%.2f:%d:%d:%d:%.2f:%.2f:%d:%d:%d\n",
        $traw, $total, $sum, $head, $user, $sys, $idle, $irq, $rq,
        $prc, $thr, $mupct, $mu, $mf, $mt, $mfpct, $supct, $su, $suf, $sut;
    } else {
        printf $rawlog
        "%s:%.2f:%.2f:%.2f:%.2f:%.2f:%.2f:%.2f:%.2f:%d:%d:%.2f:%d:%d:%d:%.2f:%.2f:%d:%d:%d\n",
        $traw, $total, $sum, $head, $user, $sys, $idle, $irq, $rq,
        $prc, $thr, $mupct, $mu, $mf, $mt, $mfpct, $supct, $su, $suf, $sut;
    }
}


# chklog - check log directory
#
sub chklog {

    my ($dir) = @_;

    if (defined $dir) {
        if (! -d $dir) {
            print "error: chklog - cannot find $dir log directory";
	    usage();
        }
    } else {
        print "error: chklog - cannot find $dir log directory";
	usage();
    }

    return;
}


# open_data - open data file
#

sub open_file {

    my ($file) = @_;
    my $fh;

    if (-f $file) {
        open $fh, "+>>", "$file" or 
	  die "error: open_file - cannot open $file $!";
	seek $fh, 0, 2;
        select ((select ($fh), $| = 1)[0]);

    } else {
        open $fh, "+>", "$file" or 
	  die "error: open_file - cannot open $file $!";
        select ((select ($fh), $| = 1)[0]);

    }

    return $fh;
}



# open_config - open JSON configuration file
#
sub open_config {

    my ($conf) = @_;
    my $json_data;

    {
        local $/;

        # we will parse now the file
	if ( defined $ENV{'KRMX_PREFIX'} ) {
	    if ( -e "$ENV{'KRMX_PREFIX'}/etc/$conf" ) {
	        open my $fh, "<", "$ENV{'KRMX_PREFIX'}/etc/$conf";
	        $json_data = <$fh>;
	        close $fh;
	    } else {
                print "error: open_config - $! $ENV{'KRMX_PREFIX'}/etc/$conf \n";
	        usage();
	    }
	} else {
	    if ( -e "C:\\Kronometrix\\etc\\$conf" ) {
		open my $fh, "<", "C:\\Kronometrix\\etc\\$conf";
		$json_data = <$fh>;
		close $fh;
	    } else { 
	        print "error: open_config - $! $conf \n"; 
		usage(); 
	    }
	} 
    }
    
    my $perl_data = JSON->new->utf8->decode($json_data); 
    
    return $perl_data;
}


# getlog - get log directory information
#
sub getlog {
    my ($data) = @_;

    my $bpath = $data->{'log'}->{'base_path'};
    chklog($bpath);

    my $cpath = $data->{'log'}->{'current_path'};
    chklog($cpath);

    my $dpath = $data->{'log'}->{'daily_path'};
    chklog($dpath);

    return ( $bpath, $cpath, $dpath );
}


# get_uptime - return system uptime
#
sub get_uptime {

    my ($lb, $ct) = @_;

    # extract lastboot time
    my $lyr   = substr ($lb, 0, 4);
    my $lmon  = substr ($lb, 4, 2);
    my $lday  = substr ($lb, 6, 2);
    my $lhrs  = substr ($lb, 8, 2);
    my $lmin  = substr ($lb, 10, 2);
    my $lsec  = substr ($lb, 12, 2);

    my $cyr   = substr ($ct, 0, 4);
    my $cmon  = substr ($ct, 4, 2);
    my $cday  = substr ($ct, 6, 2);
    my $chrs  = substr ($ct, 8, 2);
    my $cmin  = substr ($ct, 10, 2);
    my $csec  = substr ($ct, 12, 2);

    #print "Last timeboot: $lyr $lmon $lday $lhrs $lmin $lsec\n";
    #print "Current DateTime: $cyr $cmon $cday $chrs $cmin $csec\n";

    my $bootTime = timelocal($lsec, $lmin, $lhrs, $lday, $lmon - 1, $lyr);
    my $currentTime = timelocal($csec, $cmin, $chrs, $cday, $cmon - 1, $cyr);

    my $delta = $currentTime - $bootTime;
    my ($secs, $mins, $hrs, $days);
    $secs    =  $delta % 60;
    $delta   = ($delta - $secs) / 60;
    $mins    =  $delta % 60;
    $delta   = ($delta - $mins) / 60;
    $hrs     =  $delta % 24;
    $delta   = ($delta - $hrs)   / 24;
    $days    =  $delta;

    my $u = "$days" . "d " . "$hrs" . "h " . "$mins" . "m " . "$secs" . "s";

    # return uptime
    return $u;
}


# writelog - write log message
#
sub writelog {

    my ($logbuf) = @_;
    my ( $sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst ) =
    localtime(time);

    my $dt = sprintf "%4d-%02d-%02d %02d:%02d:%02d",
                $year + 1900, $mon + 1, $mday, $hour, $min, $sec;

    if (eof $log) {
        print $log "$dt $logbuf\n";
    } else {
        print $log "\n$dt $logbuf";
    }

    return;
}


# cktime - check midnight time
#
sub cktime {

    my ($sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst) = 
       localtime(time);

    my $tcheck = sprintf ("%02d%02d", $hour, $min);

    my $yesterday = get_yesterday();

    # print "time check: $tcheck";

    if ($tcheck eq $logtime ) {
        writelog ("info: cktime - start log rotation");
        close ($rawlog);
	my $numkrd = rotate($clog, $dlog, $yesterday);
        writelog ("info: cktime - end log rotation, files rotated: $numkrd");
        $rawlog = open_file($fkrd);
    }

    return;
}


## 
sub rmkrd {
    my ($file) = @_;

    if ( -e $file ) {
        if (unlink($file) > 0) { return 0; } else { return 1; }
    }

    return;
}


## null the raw data
sub null2krd {

    my($blog, $clog ) = @_;

    opendir(DIR, $clog) or
        die "error: null2krd - Can't open $clog: $!";
    my @files = grep {!/^\.+$/} readdir(DIR);
    close(DIR);

    my @krds;
    foreach my $krd (@files) {
        next if $krd !~ /.*\.krd$/;
        push @krds, $krd;
    }

    foreach my $krdf (@krds) {
        copy("$clog/$krdf", "$blog") or
           die "error: null2krd cannot copy krd file: $krdf $!\n";
         open my $fh, ">", "$clog/$krdf";
         close $fh;
    }

    return;
}


## rotate raw data
sub rotate {

    my($rawdir, $dailydir, $dstamp) = @_;

    opendir(DIR, $rawdir) or
        die "error: rotate - Can't open $rawdir: $!";
    my @files = grep {!/^\.+$/} readdir(DIR);
    close(DIR);

    my $dest = "$dailydir/$dstamp";

    my @krd_files;
    my $p = $recid . ".krd";

    foreach my $krd (@files) {
        next if $krd !~ /^$p$/;
        push @krd_files, $krd;
    }

    if ($verbose == 1) {
        printf "%s %d\n", 
               "info: rotate - copying krd data files:", $#krd_files +1;
    }

    my $cnt = 0;
    # check if we have anything to move to daily
    if (($#krd_files+1) > 0) {
   
        # make daily target dir
        unless(mkdir $dest) {
            writelog ("warning: rotate - cannot create $dstamp, already exists");
        }

        foreach my $rawfile (@krd_files) {
            move("$rawdir/$rawfile","$dest") or
                writelog ("error: rotate - copying previous daily data, $!");
            $cnt++;
        }
    }

    # return number of raw krd files moved to daily
    return $cnt;
}


## get yesterday
sub get_yesterday {

    my ( $yy, $mm, $dd ) = Today();
    ( $yy, $mm, $dd ) = Add_Delta_Days( $yy, $mm, $dd, -1 );

    # ISO 8601 YYYY-MM-DD
    my $prevdate = sprintf("%d-%02d-%02d", $yy, $mm, $dd);

    # Debug
    # print "PREVDATE: $prevdate \n";

    return $prevdate;
}


# usage - print usage and exit.
#
sub usage {
    print STDERR <<END;
USAGE: sysrec [-hV] | [interval [count]]
 eg. 
  sysrec                 # default CLI mode, print system stats
  sysrec 1 5             # print system stats 5 times, every 1s
  sysrec --install auto  # run as a service, every 60s
  sysrec --remove        # stop and remove the service 

 FIELDS:
  CPU
   #01 timestamp  : seconds since Epoch, time
   #02 cpupct     : cpu utilization, across all cpus, number
   #03 sumpct     : sum of all cpus utilization, number
   #04 headpct    : headroom cpu available, all cpus, number
   #05 userpct    : cpu utilization, user space in percent, number
   #06 sysct      : cpu utilization, system space, number
   #07 idlepct    : cpu utilization, idle state, number
   #08 irqpct     : cpu percentage servicing interrupts, number
   #09 runqsz     : run queue length, tasks waiting for run time, number
   #10 plistsz    : number of processes in the system, number
   #11 threads    : number of threads in the system, number

  MEM
   #12 memusedpct : size of used memory in percent, number
   #13 memused    : size of used memory in kilobytes, number
   #14 memfree    : size of free memory in kilobytes, number
   #15 memtotal   : size of memory in kilobytes, number
   #16 realfreepct: size of memory real free in percent of total memory, number
   #17 swapusedpct: size of used swap space in percent, number
   #18 swapused   : size of swap space is used is kilobytes, number
   #19 swapfree   : size of swap space is free in kilobytes, number
   #20 swaptotal  : size of swap space in kilobytes, number

  DISK
   #21 reads      : disk read requests per second, rate
   #22 rkbytes    : read bytes per second, in KB, rate
   #30 writes     : disk write requests per second, rate
   #31 wkbytes    : write bytes per second, in KB, rate
   #32 sumrw      : disk read+write requests per second, rate
   #33 sumrwkb    : read+write Kbytes per second, rate

  NET
   #34 rxkbytes   : received bytes per seccond, in KB, rate
   #35 txkbytes   : transmitted bytes per second, in KB, rate 
   #36 sumrxtxkbs : received + transmitted bytes per second, in KB, rate
   #37 rxerr      : number of errors while received pkt per second, rate
   #38 txerr      : number of errors while transmitting pkt per second, rate
   #39 rxdrop     : number of rx packets that were dropped per second, rate
   #40 txdrop     : number of tx packets that were dropped per second, rate
 
   #41 avg1       : LA of the last minute, number
   #42 avg5       : LA of the last 5 minutes, number
   #43 avg15      : LA of the last 15 minutes, number
END
    exit 0;
}


# revision - print revision and exit
#
sub revision {
    print STDERR <<END;
sysrec: 1.0.14, 2015-07-23 1454
END
    exit 0;
}





