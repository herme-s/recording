
#
# Copyright (c) 2015 Stefan Parvu (www.kronometrix.org).
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#
# (http://www.gnu.org/copyleft/gpl.html)

use strict;
use warnings;
use Getopt::Std;
use Time::HiRes qw(time sleep);
use POSIX qw(pause);
use Win32::OLE ('in');
use Sys::Hostname;

# Debug Only
use Data::Dumper;
### Command line arguments
usage() if defined $ARGV[0] and $ARGV[0] eq "--help";
getopts('hV') or usage();
usage() if defined $main::opt_h;
revision() if defined $main::opt_V;

# process [[interval [count]]
my ( $interval, $loop_max );
if ( defined $ARGV[0] ) {
    $interval = $ARGV[0];
    $loop_max = defined $ARGV[1] ? $ARGV[1] : 2**32;
    usage() if $interval == 0;
}
else {
    $interval = 1;
    $loop_max = 1;
}

### Variables
my $update;       # used for deltas
my %cpudataOld;   # cpu_stats data
my $loop = 0;     # current loop number
$main::opt_h = 0; # help option
$main::opt_V = 0; # revision option
my $tp = 0;       # time precision
local $| = 1;     # autoflush


### MAIN BODY

# how often do we trigger (seconds)?
my $first_interval = $interval;

#my @fields = qw(PercentIdleTime PercentProcessorTime 
#                PercentPrivilegedTime 
#	        PercentUserTime PercentInterruptTime 
#		TimeStamp_Sys100NS);
#
#my $hash1 = {};
#my $key = 'Name';

#my $wmi = Win32::OLE->GetObject("winmgmts://./root/cimv2")
#    or die "Cannot initialize WMI interface\n";
#
#my $list = $wmi->InstancesOf('Win32_PerfRawData_PerfOS_Processor')
#    or die "Failed to get instance object\n";
#
#my $v;
#foreach $v (in $list) {            
#    map{$hash1->{$v->{$key}}->{$_} = $v->{$_} }@fields;
#}


# check interval input
if ( $interval =~ /\./ ) {
   $tp = 3;
}

while(1) {

    # hostname# hostname
    my $host = lc(hostname);
    $host =~ s/\..*$// if $host =~ /\./;

    # get stats
    my $wmi = Win32::OLE->GetObject("winmgmts://./root/cimv2")
        or die "Cannot initialize WMI interface\n";

    # 
    my @items = $wmi->ExecQuery("SELECT * FROM Win32_Processor", "WQL", 
                                    0x10 | 0x20);

    #print Dumper($_) for (@items);

    foreach my $obj (in @items) {
       
        print "$obj->{AddressWidth}";

    #    print "proc: $objItem->{AddressWidth}";
    }


    printf "%.${tp}f:%s\n", time , $host;

    ### Check for end
    last if ++$loop == $loop_max;

    ### Interval
    sleep $interval;

}


### SUBROUTINES


# usage - print usage and exit.
#
sub usage {
    print STDERR <<END;
USAGE: hdwrec [-hV] | [interval [count]]
 e.g. hdwrec 5       print continuously every 5 seconds
      hdwrec 1 5     print 5 times, every 1 second

 FIELDS:
  #01 timestamp  : seconds since Epoch, time
  #02 hostname   : hostname
  #03 hdw        : machine hardware name
  #04 hypervisor : name of the hypervisor, string
  #05 os         : name of the operating system, string
  #06 relos      : release number of operating system, string
  #07 kernel     : kernel version and release number
  #08 pcpu       : number of physical installed CPUs, number
  #09 vcpu       : number of virtual CPUs, number
  #10 memtotal   : total physical memory installed, number
  #11 swaptotal  : total physical swap installed, number
  #12 disks      : total number of disks, number
  #13 nics       : total number of NICs, number
  #14 jvms       : total number of running JVMs, number
  #15 uptime     : how long the system has been running, number 
END
    exit 0;
}


# revision - print revision and exit
#
sub revision {
    print STDERR <<END;
hdwrec: 1.0.0, 2015-03-22 1437
END
    exit 0;
}

