#
# Copyright (c) 2015 Stefan Parvu (www.kronometrix.org).
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#
# (http://www.gnu.org/copyleft/gpl.html)

package PerlSvc;

use strict;
use warnings;
use Getopt::Long;
use Date::Calc qw(:all);
use File::Copy;
use Time::HiRes qw(time gettimeofday);
use Win32::OLE ('in');
use Sys::Hostname;
use Time::Local;
use Win32;
use JSON;


# Debug Only
use Data::Dumper;
### Command line arguments
usage() if defined $ARGV[0] and $ARGV[0] eq "--help";

my ($l, $v, $h, $V) = 0;
my $recid           = 'hdwrec';
our %Config         = (ServiceName => $recid);

Getopt::Long::Configure('bundling');
my $result = GetOptions (
                "l|logging" => \$l,
                "v|verbose" => \$v,
                "h|help"    => \$h,
                "V|version" => \$V,
                "n|name=s" => \$Config{ServiceName}
                );

usage() if ( $h || ! $result );
revision() if defined $V;

# process [[interval [count]]
my ( $interval, $loop_max );
if ( defined $ARGV[0] ) {
    $interval = $ARGV[0];
    $loop_max = defined $ARGV[1] ? $ARGV[1] : 2**32;
    usage() if $interval == 0;
}
else {
    $interval = 1;
    $loop_max = 1;
}

### Variables
my $loop        = 0;                      # current loop number
my $cf          = 'kronometrix.json';     # default json config
my $logtime     = '0000';                 # min time check 23:59
my $hp          = 'NA';                   # hypervisor
my $stime;                                # sleep timer
my $last_time   = 0;                      # first counter
$|= 1;                                    # autoflush

my $verbose = defined $v ? $v : 0;
my $logging = defined $l ? $l : 0;

### MAIN BODY

# how often do we trigger (seconds)?
my $first_interval = $interval;

# read configuration
my $cdata = open_config($cf);

my ( $blog, $clog, $dlog ) = getlog($cdata);

my $fname = $blog . "\\" . $recid . ".log";
my $fkrd  = $clog . "\\" . $recid . ".krd";

# open raw data
my ($log, $rawlog);

if ($logging) {
    $rawlog = open_file($fkrd);
    $log = open_file($fname);
    writelog ("info: started");
}

# get stats
my $wmi = Win32::OLE->GetObject("winmgmts://./root/cimv2")
    or die "Cannot initialize WMI interface\n";

unless (defined &ContinueRun) {
    *ContinueRun = sub { return 1 };
    *RunningAsService = sub { return 0 };
    Interactive();
}

if (RunningAsService()) {
    if ($interval == 1 && $loop_max == 1) {
        $interval = 60;
        $loop_max = 2**32;
    }

    $rawlog = open_file($fkrd);
    $log = open_file($fname);
    writelog ("info: started");
}


### SUBROUTINES


sub Startup {

    while(ContinueRun()) {


    ### verbose
    if ($verbose) {
        if (RunningAsService()) {
            writelog ("info: main - last_time=$last_time");
	} else {
            writelog ("info: main - last_time=$last_time") if ($logging);
            print "info: main - last_time=$last_time";
	}
    }

    # hostname# hostname
    my $host = lc(hostname);
    $host =~ s/\..*$// if $host =~ /\./;

    # measure payload
    my $start = Win32::GetTickCount();

    my $wproc = $wmi->InstancesOf("Win32_Processor");
    my $hdw;
    foreach my $obj (in $wproc) {
        $hdw = $obj->{AddressWidth};
    }

    if ($hdw == 64) { $hdw = "x86_64"; }
    else { $hdw = "x86"; }


    # os, relos, kernel build
    my $os = Win32::GetOSName();
    my ($s, $maj, $min, $build, $id) = Win32::GetOSVersion();
    my $relos = $maj . "." . $min;
    my $kernel = $build;

    # pcpu, vcpu
    my $wcs = $wmi->InstancesOf("Win32_ComputerSystem");
    my ($pcpu, $vcpu);
    foreach my $obj (in $wcs) {
        $pcpu = $obj->{NumberOfProcessors};
        $vcpu = $obj->{NumberOfLogicalProcessors};
    }


    # memtotal, swaptotal
    my $wos = $wmi->InstancesOf("Win32_OperatingSystem");
    my ($memtotal, $swaptotal, $freemem, $lastboot, $currtime);
    foreach my $obj (in $wos) {
        $memtotal  = $obj->{TotalVisibleMemorySize};
        $swaptotal = $obj->{SizeStoredInPagingFiles};
        $freemem   = $obj->{FreePhysicalMemory};
	$lastboot  = $obj->{LastBootUptime};
	$currtime  = $obj->{LocalDateTime};
    }

    my $uptime = get_uptime ($lastboot, $currtime);

    # get no of physical disks
    # Win32_DiskDrive Class
    my $wd = $wmi->InstancesOf("Win32_DiskDrive");
    my $ndisk = 0;
    foreach my $disk (in $wd) {
        $ndisk++;
    }


    # get no of NICs
    # Win32_NetworkAdapterConfiguration
    my $wn = $wmi->InstancesOf("Win32_NetworkAdapterConfiguration");
    my $nnic = 0;
    foreach my $nic (in $wn) {
        if ( defined($nic->{MACAddress}) and 
	     defined($nic->{IPAddress} ) ) {
            $nnic++;
	}
    }

    my $end = Win32::GetTickCount() - $start;
    my $stime = ($interval * 1000) - $end;

    # output time
    my $tnow = int(gettimeofday);

    # cktime for rotation
    if (RunningAsService()) {
        cktime();
    }

    ### verbose
    if ($verbose) {
        if (RunningAsService()) {
            writelog ("info: main - elapsed=$end(ms), sleeptime=$stime(ms), timenow=$tnow(epoch)");
	} else {
            writelog ("info: main - elapsed=$end(ms), sleeptime=$stime(ms), timenow=$tnow(epoch)") if ($logging);
            print "info: main - elapsed=$end(ms), sleeptime=$stime(ms), timenow=$tnow(epoch)";
	}
    }

    if ($last_time > 0) {
        my $drift = $tnow - $last_time;

        if ($drift > $interval) {
	    my $delta = $drift - $interval;
	    my $tfix = $tnow - $delta;
	    
            if (RunningAsService()) {
                writelog ("warning: main - drift detected, drift=$drift(s), interval=$interval(s)");
            } else {
                writelog ("warning: main - drift detected, drift=$drift(s), interval=$interval(s)") if ($logging);
                print "warning: main - drift detected, drift=$drift(s), interval=$interval(s)";
	    }

	    ### verbose
	    if ($verbose) {
                if (RunningAsService()) {
                    writelog ("info: main - delta=$delta(s), timenow=$tnow(epoch), timefix=$tfix(epoch)");
		} else {
                    writelog ("info: main - delta=$delta(s), timenow=$tnow(epoch), timefix=$tfix(epoch)") if ($logging);
                    print "info: main - delta=$delta(s), timenow=$tnow(epoch), timefix=$tfix(epoch)";
		}
	    }

            putraw($tfix , $host, $hdw, $hp, $os, $relos, $kernel, $pcpu, 
	           $vcpu, $memtotal, $swaptotal, $ndisk, $nnic, $uptime);

            $stime -= $delta * 1000;
            $last_time = $tfix;

            Win32::Sleep($stime);

    	} elsif ($drift < $interval) {

            my $ext = $interval - $drift;
            my $tfix = $tnow + $ext;
            if (RunningAsService()) {
                writelog ("warning: main - drift detected, drift=$drift(s), interval=$interval(s)"); 
            } else {
                writelog ("warning: main - drift detected, drift=$drift(s), interval=$interval(s)") if ($logging);
                print "warning: main - drift detected, drift=$drift(s), interval=$interval(s)"; 
	    }

	    ### verbose
	    if ($verbose) {
                if (RunningAsService()) {
                    writelog ("info: main - ext=$ext(s), timenow=$tnow(epoch), timefix=$tfix(epoch)");
		} else {
                    writelog ("info: main - ext=$ext(s), timenow=$tnow(epoch), timefix=$tfix(epoch)") if ($logging);
                    print "info: main - ext=$ext(s), timenow=$tnow(epoch), timefix=$tfix(epoch)";
		}

	    }

            putraw($tfix, $host, $hdw, $hp, $os, $relos, $kernel, $pcpu, 
	           $vcpu, $memtotal, $swaptotal, $ndisk, $nnic, $uptime);

            $stime += $ext * 1000;
	    $last_time = $tfix;

	    Win32::Sleep($stime);

	} else {

            putraw($tnow, $host, $hdw, $hp, lc($os), $relos, $kernel, $pcpu, 
	           $vcpu, $memtotal, $swaptotal, $ndisk, $nnic, $uptime);

	    $last_time = $tnow;

	    Win32::Sleep($stime);

	}

    # 1st loop, last_time always 0
    } else {

        putraw($tnow , $host, $hdw, $hp, lc($os), $relos, $kernel, $pcpu, 
	       $vcpu, $memtotal, $swaptotal, $ndisk, $nnic, $uptime);

        if (!RunningAsService()) {
            # check count, interval
            last if ++$loop == $loop_max;
        }

        $last_time = $tnow;

        ### Interval
        Win32::Sleep($stime);
    }

    
    if (!RunningAsService()) {
        # check count, interval
        last if ++$loop == $loop_max;
    }
    }
}


sub Interactive {
    Install();
    Startup();
}


sub Install {

    $Config{DisplayName} = "Kronometrix $Config{ServiceName} Service";
    $Config{Description} = "Kronometrix $recid Service";

    return;
}


sub Remove {
    $Config{ServiceName} = $recid;
    return;
}


# chklog - check log directory
#
sub chklog {

    my ($dir) = @_;

    if (defined $dir) {
        if (! -d $dir) {
            print "error: chklog - cannot find $dir log directory";
	    usage();
        }
    } else {
        print "error: chklog - cannot find $dir log directory";
	usage();
    }

    return;
}


# open_data - open data file
#

sub open_file {

    my ($file) = @_;
    my $fh;

    if (-f $file) {
        open $fh, "+>>", "$file" or 
	  die "error: open_file - cannot open $file $!";
	seek $fh, 0, 2;
        select ((select ($fh), $| = 1)[0]);

    } else {
        open $fh, "+>", "$file" or 
	  die "error: open_file - cannot open $file $!";
        select ((select ($fh), $| = 1)[0]);

    }

    return $fh;
}



# open_config - open JSON configuration file
#
sub open_config {

    my ($conf) = @_;
    my $json_data;

    {
        local $/;

        # we will parse now the file
	if ( defined $ENV{'KRMX_PREFIX'} ) {
	    if ( -e "$ENV{'KRMX_PREFIX'}/etc/$conf" ) {
	        open my $fh, "<", "$ENV{'KRMX_PREFIX'}/etc/$conf";
	        $json_data = <$fh>;
	        close $fh;
	    } else {
                print "error: open_config - $! $ENV{'KRMX_PREFIX'}/etc/$conf \n";
	        usage();
	    }
	} else {
	    if ( -e "C:\\Kronometrix\\etc\\$conf" ) {
		open my $fh, "<", "C:\\Kronometrix\\etc\\$conf";
		$json_data = <$fh>;
		close $fh;
	    } else { 
	        print "error: open_config - $! $conf \n"; 
		usage(); 
	    }
	} 
    }
    
    my $perl_data = JSON->new->utf8->decode($json_data); 
    
    return $perl_data;
}


# getlog - get log directory information
#
sub getlog {
    my ($data) = @_;

    my $bpath = $data->{'log'}->{'base_path'};
    chklog($bpath);

    my $cpath = $data->{'log'}->{'current_path'};
    chklog($cpath);

    my $dpath = $data->{'log'}->{'daily_path'};
    chklog($dpath);

    return ( $bpath, $cpath, $dpath );
}


# get_uptime - return system uptime
#
sub get_uptime {

    my ($lb, $ct) = @_;

    # extract lastboot time
    my $lyr   = substr ($lb, 0, 4);
    my $lmon  = substr ($lb, 4, 2);
    my $lday  = substr ($lb, 6, 2);
    my $lhrs  = substr ($lb, 8, 2);
    my $lmin  = substr ($lb, 10, 2);
    my $lsec  = substr ($lb, 12, 2);

    my $cyr   = substr ($ct, 0, 4);
    my $cmon  = substr ($ct, 4, 2);
    my $cday  = substr ($ct, 6, 2);
    my $chrs  = substr ($ct, 8, 2);
    my $cmin  = substr ($ct, 10, 2);
    my $csec  = substr ($ct, 12, 2);

    #print "Last timeboot: $lyr $lmon $lday $lhrs $lmin $lsec\n";
    #print "Current DateTime: $cyr $cmon $cday $chrs $cmin $csec\n";

    my $bootTime = timelocal($lsec, $lmin, $lhrs, $lday, $lmon - 1, $lyr);
    my $currentTime = timelocal($csec, $cmin, $chrs, $cday, $cmon - 1, $cyr);

    my $delta = $currentTime - $bootTime;
    my ($secs, $mins, $hrs, $days);
    $secs    =  $delta % 60;
    $delta   = ($delta - $secs) / 60;
    $mins    =  $delta % 60;
    $delta   = ($delta - $mins) / 60;
    $hrs     =  $delta % 24;
    $delta   = ($delta - $hrs)   / 24;
    $days    =  $delta;

    my $u = "$days" . "d " . "$hrs" . "h " . "$mins" . "m " . "$secs" . "s";

    # return uptime
    return $u;
}


# writelog - write log message
#
sub writelog {

    my ($logbuf) = @_;
    my ( $sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst ) =
    localtime(time);

    my $dt = sprintf "%4d-%02d-%02d %02d:%02d:%02d",
                $year + 1900, $mon + 1, $mday, $hour, $min, $sec;

    if (eof $log) {
        print $log "$dt $logbuf\n";
    } else {
        print $log "\n$dt $logbuf";
    }

    return;
}


# cktime - check midnight time
#
sub cktime {

    my ($sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst) = 
       localtime(time);

    my $tcheck = sprintf ("%02d%02d", $hour, $min);

    my $yesterday = get_yesterday();
    # print "time check: $tcheck";

    if ($tcheck eq $logtime ) {
        writelog ("info: cktime - start log rotation");
        close ($rawlog);
	my $numkrd = rotate($clog, $dlog, $yesterday);
        writelog ("info: cktime - end log rotation, files rotated: $numkrd");
        $rawlog = open_file($fkrd);
    }

    return;
}


## 
sub rmkrd {
    my ($file) = @_;

    if ( -e $file ) {
        if (unlink($file) > 0) { return 0; } else { return 1; }
    }

    return;
}


## null the raw data
sub null2krd {

    my($blog, $clog ) = @_;

    opendir(DIR, $clog) or
        die "error: null2krd - Can't open $clog: $!";
    my @files = grep {!/^\.+$/} readdir(DIR);
    close(DIR);

    my @krds;
    foreach my $krd (@files) {
        next if $krd !~ /.*\.krd$/;
        push @krds, $krd;
    }

    foreach my $krdf (@krds) {
        copy("$clog/$krdf", "$blog") or
           die "error: null2krd cannot copy krd file: $krdf $!\n";
         open my $fh, ">", "$clog/$krdf";
         close $fh;
    }

    return;
}


## rotate raw data
sub rotate {

    my($rawdir, $dailydir, $dstamp) = @_;

    opendir(DIR, $rawdir) or
        die "error: rotate - Can't open $rawdir: $!";
    my @files = grep {!/^\.+$/} readdir(DIR);
    close(DIR);

    my $dest = "$dailydir/$dstamp";

    my @krd_files;
    my $p = $recid . ".krd";

    foreach my $krd (@files) {
        next if $krd !~ /^$p$/;
        push @krd_files, $krd;
    }

    my $nkrd = $#krd_files + 1;

    if ($verbose) {
        writelog ("info: rotate - copying krd data files: $nkrd");
    }

    my $cnt = 0;
    # check if we have anything to move to daily
    if ( $nkrd > 0 ) {
   
        # make daily target dir
        unless(mkdir $dest) {
            writelog ("warning: rotate - cannot create $dstamp, already exists");
        }

        foreach my $rawfile (@krd_files) {
            copy("$rawdir/$rawfile","$dest") or
                writelog ("error: rotate - copying previous daily data, $!");
	
            # reset to zero
            open my $ftkrd, ">", "$rawdir/$rawfile";
            close $ftkrd;

            $cnt++;
        }
    }

    # return number of raw krd files moved to daily
    return $cnt;
}


## get yesterday
sub get_yesterday {

    my ( $yy, $mm, $dd ) = Today();
    ( $yy, $mm, $dd ) = Add_Delta_Days( $yy, $mm, $dd, -1 );

    # ISO 8601 YYYY-MM-DD
    my $prevdate = sprintf("%d-%02d-%02d", $yy, $mm, $dd);

    # Debug
    # print "PREVDATE: $prevdate \n";

    return $prevdate;
}


sub putraw {

    my ($traw , 
        $host,      $hdw,   $hp, 
	$os,        $relos, $kernel, 
	$pcpu,      $vcpu,  $memtotal, 
	$swaptotal, $ndisk, $nnic, $uptime ) = @_;

    if (RunningAsService()) {

        printf $rawlog 
            "%s:%s:%s:%s:%s:%s:%s:%d:%d:%s:%s:%d:%d:%s\n",
            $traw , 
            $host,      $hdw,   $hp, 
	    lc($os),    $relos, $kernel, 
	    $pcpu,      $vcpu,  $memtotal, 
	    $swaptotal, $ndisk, $nnic, $uptime;


    } else {
    
        if ( $logging ) {

            printf $rawlog 
                "%s:%s:%s:%s:%s:%s:%s:%d:%d:%s:%s:%d:%d:%s\n",
                $traw , 
                $host,      $hdw,   $hp, 
	        lc($os),    $relos, $kernel, 
	        $pcpu,      $vcpu,  $memtotal, 
	        $swaptotal, $ndisk, $nnic, $uptime;
	}


        printf
            "%s:%s:%s:%s:%s:%s:%s:%d:%d:%s:%s:%d:%d:%s\n",
            $traw , 
            $host,      $hdw,   $hp, 
	    lc($os),    $relos, $kernel, 
	    $pcpu,      $vcpu,  $memtotal, 
	    $swaptotal, $ndisk, $nnic, $uptime;
    }

    return;
}



# usage - print usage and exit
#
sub usage {
    print STDERR <<END;
USAGE: hdwrec [-lhV] | [interval [count]]
 eg. 
  hdwrec.exe                # default CLI mode, print system inventory stdout
  hdwrec.exe 1 5            # print system inventory 5 times, every 1s stdout
  hdwrec.exe -l 25          # print system inventory, every 25s stdout, krdlog
  hdwrec.exe --install auto # run as a service, every 60s, default krdlog
  hdwrec.exe --remove       # stop and remove the service

 FIELDS:
  #01 timestamp  : seconds since Epoch, time
  #02 hostname   : hostname
  #03 hdw        : machine hardware name
  #04 os         : name of the operating system, string
  #05 relos      : release number of operating system, string
  #06 kernel     : kernel version and release number
  #07 pcpu       : number of physical installed CPUs, number
  #08 vcpu       : number of virtual CPUs, number
  #09 memtotal   : total physical memory installed, number
  #10 swaptotal  : total physical swap installed, number
  #11 disks      : total number of physical disks, number
  #12 nics       : total number of physical NICs, number
  #13 uptime     : system uptime, string 
END
    exit 0;
}


# revision - print revision and exit
#
sub revision {
    print STDERR <<END;
hdwrec: 1.0.16, 2015-08-12 2206
END
    exit 0;
}
